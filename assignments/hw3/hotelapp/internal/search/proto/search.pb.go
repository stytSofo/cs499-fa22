// Code generated by protoc-gen-go. DO NOT EDIT.
// source: internal/search/proto/search.proto

/*
Package search is a generated protocol buffer package.

It is generated from these files:
	internal/search/proto/search.proto

It has these top-level messages:
	NearbyRequest
	CityRequest
	SearchResult
*/
package search

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type NearbyRequest struct {
	Lat     float32 `protobuf:"fixed32,1,opt,name=lat" json:"lat,omitempty"`
	Lon     float32 `protobuf:"fixed32,2,opt,name=lon" json:"lon,omitempty"`
	InDate  string  `protobuf:"bytes,3,opt,name=inDate" json:"inDate,omitempty"`
	OutDate string  `protobuf:"bytes,4,opt,name=outDate" json:"outDate,omitempty"`
}

func (m *NearbyRequest) Reset()                    { *m = NearbyRequest{} }
func (m *NearbyRequest) String() string            { return proto.CompactTextString(m) }
func (*NearbyRequest) ProtoMessage()               {}
func (*NearbyRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *NearbyRequest) GetLat() float32 {
	if m != nil {
		return m.Lat
	}
	return 0
}

func (m *NearbyRequest) GetLon() float32 {
	if m != nil {
		return m.Lon
	}
	return 0
}

func (m *NearbyRequest) GetInDate() string {
	if m != nil {
		return m.InDate
	}
	return ""
}

func (m *NearbyRequest) GetOutDate() string {
	if m != nil {
		return m.OutDate
	}
	return ""
}

// TODO(hw): add city search endpoint
type CityRequest struct {
	City    string `protobuf:"bytes,1,opt,name=city" json:"city,omitempty"`
	InDate  string `protobuf:"bytes,2,opt,name=inDate" json:"inDate,omitempty"`
	OutDate string `protobuf:"bytes,3,opt,name=outDate" json:"outDate,omitempty"`
}

func (m *CityRequest) Reset()                    { *m = CityRequest{} }
func (m *CityRequest) String() string            { return proto.CompactTextString(m) }
func (*CityRequest) ProtoMessage()               {}
func (*CityRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *CityRequest) GetCity() string {
	if m != nil {
		return m.City
	}
	return ""
}

func (m *CityRequest) GetInDate() string {
	if m != nil {
		return m.InDate
	}
	return ""
}

func (m *CityRequest) GetOutDate() string {
	if m != nil {
		return m.OutDate
	}
	return ""
}

type SearchResult struct {
	HotelIds []string `protobuf:"bytes,1,rep,name=hotelIds" json:"hotelIds,omitempty"`
}

func (m *SearchResult) Reset()                    { *m = SearchResult{} }
func (m *SearchResult) String() string            { return proto.CompactTextString(m) }
func (*SearchResult) ProtoMessage()               {}
func (*SearchResult) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *SearchResult) GetHotelIds() []string {
	if m != nil {
		return m.HotelIds
	}
	return nil
}

func init() {
	proto.RegisterType((*NearbyRequest)(nil), "search.NearbyRequest")
	proto.RegisterType((*CityRequest)(nil), "search.CityRequest")
	proto.RegisterType((*SearchResult)(nil), "search.SearchResult")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Search service

type SearchClient interface {
	Nearby(ctx context.Context, in *NearbyRequest, opts ...grpc.CallOption) (*SearchResult, error)
	City(ctx context.Context, in *CityRequest, opts ...grpc.CallOption) (*SearchResult, error)
}

type searchClient struct {
	cc *grpc.ClientConn
}

func NewSearchClient(cc *grpc.ClientConn) SearchClient {
	return &searchClient{cc}
}

func (c *searchClient) Nearby(ctx context.Context, in *NearbyRequest, opts ...grpc.CallOption) (*SearchResult, error) {
	out := new(SearchResult)
	err := grpc.Invoke(ctx, "/search.Search/Nearby", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchClient) City(ctx context.Context, in *CityRequest, opts ...grpc.CallOption) (*SearchResult, error) {
	out := new(SearchResult)
	err := grpc.Invoke(ctx, "/search.Search/City", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Search service

type SearchServer interface {
	Nearby(context.Context, *NearbyRequest) (*SearchResult, error)
	City(context.Context, *CityRequest) (*SearchResult, error)
}

func RegisterSearchServer(s *grpc.Server, srv SearchServer) {
	s.RegisterService(&_Search_serviceDesc, srv)
}

func _Search_Nearby_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NearbyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchServer).Nearby(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/search.Search/Nearby",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchServer).Nearby(ctx, req.(*NearbyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Search_City_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchServer).City(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/search.Search/City",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchServer).City(ctx, req.(*CityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Search_serviceDesc = grpc.ServiceDesc{
	ServiceName: "search.Search",
	HandlerType: (*SearchServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Nearby",
			Handler:    _Search_Nearby_Handler,
		},
		{
			MethodName: "City",
			Handler:    _Search_City_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/search/proto/search.proto",
}

func init() { proto.RegisterFile("internal/search/proto/search.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 235 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x90, 0x4f, 0x4b, 0xc3, 0x40,
	0x10, 0xc5, 0xc9, 0x1f, 0x56, 0x33, 0x2a, 0xc8, 0xf8, 0x87, 0xa5, 0xa7, 0x90, 0x53, 0xf0, 0xd0,
	0xa2, 0xe2, 0x27, 0xd0, 0x8b, 0x17, 0x0f, 0xdb, 0x4f, 0xb0, 0xad, 0x03, 0x0d, 0x84, 0x5d, 0xdd,
	0x9d, 0x1c, 0xfa, 0xed, 0xa5, 0x93, 0x4d, 0x69, 0xc0, 0xde, 0xe6, 0x37, 0x6f, 0xf7, 0x0d, 0xef,
	0x41, 0xd3, 0x39, 0xa6, 0xe0, 0x6c, 0xbf, 0x8a, 0x64, 0xc3, 0x76, 0xb7, 0xfa, 0x09, 0x9e, 0x7d,
	0x82, 0xa5, 0x00, 0xaa, 0x91, 0x1a, 0x82, 0x9b, 0x2f, 0xb2, 0x61, 0xb3, 0x37, 0xf4, 0x3b, 0x50,
	0x64, 0xbc, 0x85, 0xa2, 0xb7, 0xac, 0xb3, 0x3a, 0x6b, 0x73, 0x73, 0x18, 0x65, 0xe3, 0x9d, 0xce,
	0xd3, 0xc6, 0x3b, 0x7c, 0x04, 0xd5, 0xb9, 0x0f, 0xcb, 0xa4, 0x8b, 0x3a, 0x6b, 0x2b, 0x93, 0x08,
	0x35, 0x5c, 0xf8, 0x81, 0x45, 0x28, 0x45, 0x98, 0xb0, 0x59, 0xc3, 0xd5, 0x7b, 0xc7, 0xc7, 0x23,
	0x08, 0xe5, 0xb6, 0xe3, 0xbd, 0x5c, 0xa9, 0x8c, 0xcc, 0x27, 0xa6, 0xf9, 0x39, 0xd3, 0x62, 0x6e,
	0xfa, 0x04, 0xd7, 0x6b, 0x49, 0x61, 0x28, 0x0e, 0x3d, 0xe3, 0x02, 0x2e, 0x77, 0x9e, 0xa9, 0xff,
	0xfc, 0x8e, 0x3a, 0xab, 0x8b, 0xb6, 0x32, 0x47, 0x7e, 0x09, 0xa0, 0xc6, 0xb7, 0xf8, 0x06, 0x6a,
	0x4c, 0x8c, 0x0f, 0xcb, 0x54, 0xc9, 0xac, 0x81, 0xc5, 0xfd, 0xb4, 0x9e, 0x99, 0x3f, 0x43, 0x79,
	0x48, 0x80, 0x77, 0x93, 0x7a, 0x92, 0xe7, 0xff, 0x2f, 0x1b, 0x25, 0x55, 0xbf, 0xfe, 0x05, 0x00,
	0x00, 0xff, 0xff, 0x4e, 0xe2, 0x18, 0xa1, 0x90, 0x01, 0x00, 0x00,
}
